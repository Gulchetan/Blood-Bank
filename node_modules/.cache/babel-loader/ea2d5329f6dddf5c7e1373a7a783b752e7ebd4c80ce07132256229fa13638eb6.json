{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blood Bank\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { supabase } from '../supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n\n  // Initialize auth state\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      var _session$user;\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    };\n    getInitialSession();\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n\n  // Send OTP to email\n  const signUpWithEmail = async email => {\n    try {\n      setAuthError(null);\n      const {\n        error\n      } = await supabase.auth.signInWithOtp({\n        email: email\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        message: 'OTP sent to your email'\n      };\n    } catch (error) {\n      setAuthError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Verify OTP and sign in\n  const verifyOTP = async (email, token) => {\n    try {\n      setAuthError(null);\n      const {\n        data,\n        error\n      } = await supabase.auth.verifyOtp({\n        email: email,\n        token: token,\n        type: 'email'\n      });\n      if (error) throw error;\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      setAuthError(error.message);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Sign out\n  const signOut = async () => {\n    try {\n      setAuthError(null);\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error) {\n      setAuthError(error.message);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async updates => {\n    try {\n      setAuthError(null);\n      const {\n        error\n      } = await supabase.auth.updateUser(updates);\n      if (error) throw error;\n    } catch (error) {\n      setAuthError(error.message);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    authError,\n    signUpWithEmail,\n    verifyOTP,\n    signOut,\n    updateProfile,\n    clearError: () => setAuthError(null)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"sfQHJDVKyTelM60NkBUdF9P68OI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","authError","setAuthError","getInitialSession","_session$user","data","session","auth","getSession","subscription","onAuthStateChange","event","_session$user2","unsubscribe","signUpWithEmail","email","error","signInWithOtp","success","message","verifyOTP","token","verifyOtp","type","signOut","updateProfile","updates","updateUser","value","clearError","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Blood Bank/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authError, setAuthError] = useState(null);\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    // Get initial session\r\n    const getInitialSession = async () => {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    };\r\n\r\n    getInitialSession();\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setUser(session?.user ?? null);\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  // Send OTP to email\r\n  const signUpWithEmail = async (email) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.signInWithOtp({\r\n        email: email,\r\n      });\r\n      \r\n      if (error) throw error;\r\n      \r\n      return { success: true, message: 'OTP sent to your email' };\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Verify OTP and sign in\r\n  const verifyOTP = async (email, token) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { data, error } = await supabase.auth.verifyOtp({\r\n        email: email,\r\n        token: token,\r\n        type: 'email'\r\n      });\r\n      \r\n      if (error) throw error;\r\n      \r\n      return { success: true, user: data.user };\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async () => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (updates) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.updateUser(updates);\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    authError,\r\n    signUpWithEmail,\r\n    verifyOTP,\r\n    signOut,\r\n    updateProfile,\r\n    clearError: () => setAuthError(null)\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}