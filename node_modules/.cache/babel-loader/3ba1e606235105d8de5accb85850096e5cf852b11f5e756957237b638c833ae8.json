{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{supabase}from'../supabase';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[authError,setAuthError]=useState(null);// Initialize auth state\nuseEffect(()=>{// Get initial session\nconst getInitialSession=async()=>{var _session$user;const{data:{session}}=await supabase.auth.getSession();setUser((_session$user=session===null||session===void 0?void 0:session.user)!==null&&_session$user!==void 0?_session$user:null);setLoading(false);};getInitialSession();// Listen for auth changes\nconst{data:{subscription}}=supabase.auth.onAuthStateChange(async(event,session)=>{var _session$user2;setUser((_session$user2=session===null||session===void 0?void 0:session.user)!==null&&_session$user2!==void 0?_session$user2:null);setLoading(false);});return()=>subscription.unsubscribe();},[]);// Send OTP to email\nconst signUpWithEmail=async email=>{try{setAuthError(null);const{error}=await supabase.auth.signInWithOtp({email:email});if(error)throw error;return{success:true,message:'OTP sent to your email'};}catch(error){setAuthError(error.message);return{success:false,error:error.message};}};// Verify OTP and sign in\nconst verifyOTP=async(email,token)=>{try{setAuthError(null);const{data,error}=await supabase.auth.verifyOtp({email:email,token:token,type:'email'});if(error)throw error;return{success:true,user:data.user};}catch(error){setAuthError(error.message);return{success:false,error:error.message};}};// Sign out\nconst signOut=async()=>{try{setAuthError(null);const{error}=await supabase.auth.signOut();if(error)throw error;}catch(error){setAuthError(error.message);}};// Update user profile\nconst updateProfile=async updates=>{try{setAuthError(null);const{error}=await supabase.auth.updateUser(updates);if(error)throw error;}catch(error){setAuthError(error.message);}};const value={user,loading,authError,signUpWithEmail,verifyOTP,signOut,updateProfile,clearError:()=>setAuthError(null)};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","authError","setAuthError","getInitialSession","_session$user","data","session","auth","getSession","subscription","onAuthStateChange","event","_session$user2","unsubscribe","signUpWithEmail","email","error","signInWithOtp","success","message","verifyOTP","token","verifyOtp","type","signOut","updateProfile","updates","updateUser","value","clearError","Provider"],"sources":["D:/Blood Bank/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { supabase } from '../supabase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authError, setAuthError] = useState(null);\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    // Get initial session\r\n    const getInitialSession = async () => {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    };\r\n\r\n    getInitialSession();\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setUser(session?.user ?? null);\r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  // Send OTP to email\r\n  const signUpWithEmail = async (email) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.signInWithOtp({\r\n        email: email,\r\n      });\r\n      \r\n      if (error) throw error;\r\n      \r\n      return { success: true, message: 'OTP sent to your email' };\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Verify OTP and sign in\r\n  const verifyOTP = async (email, token) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { data, error } = await supabase.auth.verifyOtp({\r\n        email: email,\r\n        token: token,\r\n        type: 'email'\r\n      });\r\n      \r\n      if (error) throw error;\r\n      \r\n      return { success: true, user: data.user };\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async () => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (updates) => {\r\n    try {\r\n      setAuthError(null);\r\n      const { error } = await supabase.auth.updateUser(updates);\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      setAuthError(error.message);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    authError,\r\n    signUpWithEmail,\r\n    verifyOTP,\r\n    signOut,\r\n    updateProfile,\r\n    clearError: () => setAuthError(null)\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}